openapi: "3.0.3"

info:
  description: "Welcome to WebDS API documentation!"
  version: "1.0.0"
  title: "WebDS REST API"
  termsOfService: "https://confluence.synaptics.com/display/PRJRN/%5BWebDS%5D+WebDS+API+Definition"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: '{protocol}://localhost/webds'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http

tags:
- name: "About"
  description: "about endpoints"
  #externalDocs:
  #  description: "Find out more"
  #  url: "https://confluence.synaptics.com/display/~scottl/WebDS+API"

- name: "Command"
  description: "send touchcomm commands"

- name: "Config"
  description: "config endpoints"

- name: "Filesystem"
  description: "ilesystem endponits"

- name: "Gear Selection"
  description: "gear selection endpoints"

- name: "General"
  description: "general endpoints"

- name: "Packrat"
  description: "packrat endpoints"

- name: "Production Tests"
  description: "production tests endpoints"

- name: "Report"
  description: "report endpoints"

- name: "Reprogram"
  description: "reporgram endpoints"

- name: "Settings"
  description: "settings endpoints"

- name: "Tutor"
  description: "tutor endpoints"

- name: "Register"
  description: "register endpoints"

- name: "Passthrough"
  description: "passthrough endpoints"

- name: "Production Tests v2"
  description: "production tests endpoints"

- name: "RAM Backdoor"
  description: "ram backdoor endpoints"

paths:
  /packrat:
    get:
      tags:
      - "Packrat"
      summary: "Get file list by given extension"
      description: "Client requests list of packrat files in packrat cache on server with specified file extension."
      operationId: "get-packrat"
      parameters:
      - name: extension
        in: query
        description: "Extension values that need to be considered for filter"
        schema:
          type: string
          enum: ["hex", "json", "img"]
          default: "hex"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
          
    post:
      tags:
      - "Packrat"
      summary: "Upload a packrat file to server"
      description: "Client uploads packrat file to packrat cache on server.\n
                    Server parses packrat ID from contents of packrat file and places packrat file in appropriate location in packrat cache."
      operationId: "post-packrat"
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
   
          
  /packrat/{packrat-id}:
    get:
      tags:
      - "Packrat"
      summary: "JSON containing list of packrat files"
      description: "Client requests list of packrat files in packrat cache on server for specified packrat ID."
      operationId: "packrat-id-get"
      parameters:
      - in: path
        name: packrat-id   # Note the name is the same as in the path
        required: true
        schema:
          type: integer
        description: "The Packrat ID"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
      deprecated: true
    
    post:
      tags:
      - "Packrat"
      summary: "Upload a packrat file to server"
      description: "Client uploads packrat file to packrat cache on server.\n
                    Server parses packrat ID from contents of packrat file and places packrat file in appropriate location in packrat cache."
      operationId: "post-packrat-id"
      requestBody:
        description: "The packrat file to upload."
        content:
          application/octet-stream:
            schema:
              type: object
      parameters:
      - in: path
        name: packrat-id   # Note the name is the same as in the path
        required: true
        schema:
          type: integer
          default: 3318382
        description: "The Packrat ID"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

  /packrat/{packrat-id}/{filename}:
    get:
      tags:
      - "Packrat"
      summary: "Blob containing requested packrat file"
      description: "Client requests specific packrat file from packrat cache on server"
      operationId: "get-packrat-id-filename"
      parameters:
      - in: path
        name: packrat-id   # Note the name is the same as in the path
        required: true
        schema:
          type: integer
          default: 3318382
        description: "The Packrat ID"
      - in: path
        name: filename   # Note the name is the same as in the path
        required: true
        schema:
          type: string
          default: "PR3318382.img"
        description: "The Packrat file"
      - name: type
        in: query
        description: "type for filter"
        schema:
          type: string
          enum: ["base", "updated"]
          default: "updated"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
      
    delete:
      tags:
      - "Packrat"
      summary: "JSON containing name of packrat file to delete"
      description: "Client requests for deletion of specific packrat file in packrat cache on server"
      operationId: "delete-packrat-id"
      parameters:
      - in: path
        name: packrat-id
        required: true
        schema:
          type: integer
          default: 3318382
        description: "The Packrat ID"
      - in: path
        name: filename
        required: true
        schema:
          type: string
          default: "config_private.json"
        description: "File name"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
  /command:
    get:
      tags:
      - "Command"
      summary: "query command"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "get-command"
      parameters:
      - name: query
        in: query
        description: "Status values that need to be considered for filter"
        required: true
        schema:
          type: string
          enum: ["identify", "getAppInfo"]
          default: "identify"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
      deprecated: true
    post:
      tags:
      - "Command"
      summary: "JSON containing command and payload data  "
      description: "Client issues TouchComm command with necessary payload data to server.\n
                    Server replies client with response data from execution of command."
      operationId: "post-command"
      requestBody:
        description: "json content"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Command"
      responses:
        '201':
          description: Created

  /report:
    post:
      tags:
      - "Report"
      summary: "JSON containing report ID to enable/disable"
      description: "Client requests for server to enable/disable specific report type."
      operationId: "post-report"
      requestBody:
        description: "report ID to enable/disable"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        '201':
          description: Created
    get:
      tags:
      - "Report"
      summary: "SSE"
      description: "Client sets up event-stream listener for specific report type Server pushes report data to client upon availability."
      responses:
        '200':
          description: "SSE"
          ##content:
          ##  text/event-stream:
          ##    schema:
          ##      type: "array" 
          ##      format: "event-stream"
          ##      items:
          ##        oneOf:
          ##        - type: "object"
          ##          properties:
          ##             id:
          ##               type: "string"
          ##             event: 
          ##               const: "cat"
          ##             data: 
          ##               type: "object"
          ##               properties: 
          ##                   name:
          ##                   type: "string"

  /report/{type}:
    get:
      tags:
      - "Report"
      summary: "Client requests one shot report"
      operationId: "get-report-type"
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum:
          - "baseline"
          - "delta"
          - "raw"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

  /filesystem:
    get:
      tags:
      - "Filesystem"
      summary: "JSON containing directory tree content"
      description: "Client requests directory tree content of specified location in file system on server."
      operationId: "get-filesystem"
      parameters:
      - name: dir
        in: query
        description: "show directory fs tree"
        required: true
        schema:
          type: string
          default: "/home/dsdkuser/jupyter/workspace"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    
    post:
      tags:
      - "Filesystem"
      summary: "FormData containing file(s) to upload and location in file system on server to upload file(s) to"
      description: "Client uploads file(s) to specified location in file system on server."
      operationId: "post-filesystem"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                location:
                  type: string
                  default: "/home/dsdkuser/"
                files:
                  type: array
                  items:
                    type: object
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
  
  /reprogram:
    get:
      tags:
      - "Reprogram"
      summary: "SSE"
      description: "Client sets up event-stream listener for reprogram progress data\n
                    Server pushes progress data to client during reprogram process\n
                    Final progress data from server also contains additional status and message entries"
      operationId: "get-reprogram"
      responses:
        '200':
          description: "JSON containing progress data of reprogram process"
    
    post:
      tags:
      - "Reprogram"
      summary: "JSON containing path to .hex file in packrat cache to use for reprogram process"
      description: "Client requests for server to initiate reprogram process with specified .hex file in packrat cache"
      operationId: "post-reprogram"
      requestBody:
        description: "json content"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reprogram"
      responses:
        '201':
          description: Created
       
  /about:
    get:
      tags:
      - "About"
      summary: "Client requests information"
      description: "Client requests information\n
                    - PinormOS release\n
                    - versions of sub-modules\n
                    - versions of sub-modules\n"
      operationId: "get-about"
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
          enum:
          - "os-info"
          - "system-info"
          - "android-connection"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
          
  /settings/connection:
    get:
      tags:
      - "Settings"
      summary: "Client requests connection settings"
      operationId: "get-settings-connection"
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
          enum:
          - "default"
          - "custom"
          - "comm"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "Settings"
      summary: "JSON containing connection settings action"
      operationId: "post-settings-connection"
      requestBody:
        description: "reset/update connection settings"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsConnection"
      responses:
        '200':
          description: Connection result

  /settings/wifi:
    get:
      tags:
      - "Settings"
      summary: "Client requests wifi settings"
      operationId: "get-settings-wifi"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "Settings"
      summary: "JSON containing wifi settings action"
      operationId: "post-settings-wifi"
      requestBody:
        description: "update wifi settings"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsWifi"
      responses:
        '200':
          description: Wifi result

  /settings/adb:
    get:
      tags:
      - "Settings"
      summary: "Client requests adb settings"
      operationId: "get-settings-adb"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "Settings"
      summary: "JSON containing adb settings"
      operationId: "post-settings-adb"
      requestBody:
        description: "adb pair & connect"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsADB"
      responses:
        '200':
          description: Wifi result

  /config/{type}:
    get:
      tags:
      - "Config"
      summary: "Client requests firmware configuration"
      operationId: "get-config"
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum:
          - "static"
          - "dynamic"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    post:
      tags:
      - "Config"
      summary: "JSON containing configuration to set"
      operationId: "post-config"
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum:
          - "static"
          - "dynamic"
      requestBody:
        description: "config json"
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Connection result

  /gear-selection:
    get:
      tags:
      - "Gear Selection"
      summary: "SSE"
      description: "JSON containing execution progress of PDNR sweep"
      operationId: "get-gear-selection"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "Gear Selection"
      summary: "JSON containing function and arguments for execution in GearSelectionManager"
      operationId: "post-gear-selection"
      requestBody:
        description: "config json"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GearSelection"
      responses:
        '200':
          description: Connection result
          
  /production-tests:
    get:
      tags:
      - "Production Tests"
      summary: "SSE"
      description: "JSON containing test progress and result"
      operationId: "get-production-tests"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

  /production-tests/{part-number}:
    get:
      tags:
      - "Production Tests"
      summary: "JSON containing available test sets for specified part number"
      description: "Client requests available test sets for specified part number"
      operationId: "get-production-tests-partnumber"
      parameters:
      - in: path
        name: part-number   # Note the name is the same as in the path
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    
    post:
      tags:
      - "Production Tests"
      summary: "JSON containing parameters for specifying test set to run  "
      operationId: "post-production-tests-partnumber"
      parameters:
      - in: path
        name: part-number   # Note the name is the same as in the path
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      requestBody:
        description: "run test"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductionTestsPartnumber"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    
    put:
      tags:
      - "Production Tests"
      summary: "JSON containing data for updating custom test sets for specified part number  "
      operationId: "put-production-tests-partnumber"
      parameters:
      - in: path
        name: part-number   # Note the name is the same as in the path
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      requestBody:
        description: "update test"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductionTestsList"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
          
  /general:
    get:
      tags:
      - "General"
      summary: "JSON containing initialization message"
      operationId: "get-general"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "General"
      summary: "JSON containing command to execute"
      operationId: "post-general"
      requestBody:
        description: "config json"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/General"
      responses:
        '200':
          description: result

  /tutor/{module}:
    get:
      tags:
      - "Tutor"
      summary: "Client requests tutor get"
      operationId: "get-tutor-module"
      parameters:
      - name: module
        in: path
        required: true
        schema:
          type: string
          default: "SampleModule"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    post:
      tags:
      - "Tutor"
      summary: "JSON containing tutor post"
      operationId: "post-tutor-module"
      parameters:
      - name: module
        in: path
        required: true
        schema:
          type: string
          default: "SampleModule"
      requestBody:
        description: "tutor json"
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: result

  /register:
    get:
      tags:
      - "Register"
      summary: "SSE"
      description: "Client requests register sse"
      operationId: "get-register"
      responses:
        '200':
          description: "JSON containing progress data of register command process"

    post:
      tags:
      - "Register"
      summary: "JSON containing command and data"
      description: "Client requests register Post"
      operationId: "post-register"
      requestBody:
        description: "json content"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        '201':
          description: Created

  /ram-backdoor:
    get:
      tags:
      - "RAM Backdoor"
      summary: "SSE"
      description: "Client requests ram backdoor sse"
      operationId: "get-register"
      responses:
        '200':
          description: "JSON containing progress data of ram backdoor command process"

    post:
      tags:
      - "RAM Backdoor"
      summary: "JSON containing command and data"
      description: "Client requests ram backdoor Post"
      operationId: "post-ram-backdoor"
      requestBody:
        description: "json content"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RamBackdoor"
      responses:
        '201':
          description: Created

  /passthrough/{file}:
    get:
      tags:
      - "Passthrough"
      summary: "Client requests passthrough get"
      operationId: "get-passthrough-module"
      parameters:
      - name: file
        in: path
        required: true
        schema:
          type: string
          default: "demo"
      - name: function
        in: query
        description: "Function name"
        schema:
          type: string
          default: "demo_get_with_param"
      - name: param
        in: query
        description: "Function parameters"
        schema:
          default: 1
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"
    post:
      tags:
      - "Passthrough"
      summary: "JSON containing passthrough post"
      operationId: "post-passthrough-module"
      parameters:
      - name: file
        in: path
        required: true
        schema:
          type: string
          default: "demo"
      requestBody:
        description: "passthrough json"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassthroughParam"
      responses:
        '200':
          description: result
  /pt2:
    get:
      tags:
      - "Production Tests v2"
      summary: "SSE"
      description: "JSON containing test progress and result"
      operationId: "get-production-tests-sse"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"


  /pt2/partnumber/{part-number}/{plan}:
    get:
      tags:
      - "Production Tests v2"
      summary: "Get Partnumber Plan"
      description: "Client requests content of plan"
      operationId: "get-production-tests-partumber-plan"
      parameters:
      - in: path
        name: part-number
        required: true
        description: "The Part Number"
        schema:
          type: string
          default: "S3908-15.0.0"
      - in: path
        name: plan
        required: true
        description: "The Test Plan"
        schema:
          type: string
          default: "a"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    post:
      tags:
      - "Production Tests v2"
      summary: "start a test by given partnumber and plan"
      description: "JSON containing task status"
      operationId: "post-production-tests-run-plan" 
      requestBody:
        description: "run test"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductionTestsV2PartnumberPlan"
      parameters:
      - in: path
        name: part-number
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      - in: path
        name: plan
        required: true
        schema:
          type: string
          default: "a"
        description: "The Test Plan"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

  ###// GET /webds/production_test/S3908-15.0.0
  /pt2/partnumber/{part-number}:
    get:
      tags:
      - "Production Tests v2"
      summary: "Get Partnumber List"
      description: "Client requests list of plans or list of library scripts."
      operationId: "get-production-tests-query-partumber"
      parameters:
      - in: query
        name: query
        description: "Extension values that need to be considered for filter"
        schema:
          type: string
          enum: ["plans", "lib"]
          default: "plans"
      - in: path
        name: part-number
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"


  ###// GET /webds/production_test/S3908-15.0.0/planA/caseA
  /pt2/partnumber/{part-number}/{plan}/{case}:
    post:
      tags:
      - "Production Tests v2"
      summary: "update test case"
      description: "JSON containing case content"
      operationId: "post-production-tests-update-case" 
      requestBody:
        description: "update case"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductionTestsV2Case"
      parameters:
      - in: path
        name: part-number
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      - in: path
        name: plan
        required: true
        schema:
          type: string
          default: "a"
        description: "The Test Plan"
      - in: path
        name: case
        required: true
        schema:
          type: string
          default: "My Case"
        description: "The Test Case"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

    delete:
      tags:
      - "Production Tests v2"
      summary: "delete test case"
      operationId: "delete-production-tests-case" 
      parameters:
      - in: path
        name: part-number
        required: true
        schema:
          type: string
          default: "S3908-15.0.0"
        description: "The Part Number"
      - in: path
        name: plan
        required: true
        schema:
          type: string
          default: "a"
        description: "The Test Plan"
      - in: path
        name: case
        required: true
        schema:
          type: string
          default: "My Case"
        description: "The Test Case"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

components:
  schemas:
    SettingsConnection:
      type: object
      properties:
        action:
          type: string
          enum:
          - "reset"
          - "update"
          default: "update"
        value:
          $ref: "#/components/schemas/ConnectionParam"

    SettingsWifi:
      type: object
      properties:
        status:
          type: string
          default: "on"
        action:
          type: string
          enum:
          - "connect"
          - "disconnect"
          default: "connect"
        network:
          type: string
          default: "Guest"
        password:
          type: string
          default: "********"

    SettingsADB:
      type: object
      properties:
        action:
          type: string
          default: "connect"
          enum:
          - "connect"
          - "disconnect"
        ip:
          type: string
          default: "999.999.999.999"
        connectPort:
          type: string
          default: "00000"
        pairPort:
          type: string
          default: "00001"
        pairingCode:
          type: string
          default: "000000"

    General:
      type: object
      properties:
        command:
          $ref: "#/components/schemas/GeneralCommand"

    GeneralCommand:
      type: object
      properties:
        action:
          type: string
          default: "reboot"
        target:
          type: string
          default: "rpi4"
        token:
          type: string
          default: "none"

    Command:
      type: object
      properties:
        command:
          type: string
          default: "identify"
        payload:
          type: array
          items:
            type: integer
            format: int8
          default: []
    
    Report:
      type: object
      properties:
        enable:
          type: array
          items:
            type: integer
            format: int8
          default: [17,18]
        disable:
          type: array
          items:
            type: integer
            format: int8
          default: [19]
        fps:
          type: integer
          default: 300  
          
      
    Reprogram:
      type: object
      properties:
        action:
          type: string
          enum:
          - "start"
          - "cancel"
          default: "start"
        filename:
          type: string
          default: "3318382/PR3318382.hex"

    ConnectionParam:
      type: object
      properties:
        interfaces:
          type: array
          items:
            type: string
          default: ["i2c","spi"]
        port:
          type: integer
          default: 1729
        speed:
          type: integer
          default: null

    WifiConnectParam:
      type: object
      properties:
        network:
          type: string
          default: "Guest"
        password:
          type: string
          default: "********"

    WifiDisconnectParam:
      type: object
      properties:
        network:
          type: string
          default: "Guest"

    GearSelection:
      type: object
      properties:
        function:
          type: string
        arguments:
          type: string
          
    ProductionTestsPartnumber:
      type: object
      properties:
        test:
          type: string
          default: "all"
      
    ProductionTestsList:
      type: array
      items:
        $ref: "#/components/schemas/ProductionTestsItem"
  
    ProductionTestsItem:
      type: object
      properties:
        id:
          type: string
          default: "b7f7ec88-f551-4593-9087-7a230be5a483"
        name:
          type: string
          default: "Test Set N"
        tests:
          type: array
          items:
            type: string
            default: 'ResetPinTest'

    Register:
      type: object
      properties:
        command:
          type: string
          enum:
          - "read"
          - "write"
          default: "read"
        sse:
          type: boolean
          enum:
          - true
          - false
          default: true
        data:
          type: array
          items:
            type: integer
            format: int32
          default: [0x20000000, 0x2000000C]

    RamBackdoor:
      type: object
      properties:
        command:
          type: string
          enum:
          - "read"
          - "write"
          default: "read"
        sse:
          type: boolean
          enum:
          - true
          - false
          default: true
        data:
          type: array
          items:
            type: integer
            format: int32
          default: [0x20000000, 0x2000000C]

    PassthroughParam:
      type: object
      properties:
        function:
          type: string
          default: "demo_post"
        param:
          default: [1,2,3]

    ProductionTestsV2PartnumberPlan:
      type: object
      properties:
        task:
          type: string
          default: "run"

    ProductionTestsV2Case:
      type: object
      properties:
        name:
          type: string
          default: "My Case"
        limits:
          type: string
          default: "limitsA"
        settings:
          type: object
          properties:
            protocol:
              type: object
              properties:
                i2c:
                  type: string
                  default: "0x2C"
            power:
              type: object
              properties:
                vdd:
                  type: integer
                  default: 3300
                vio:
                  type: integer
                  default: 3300
                vled:
                  type: integer
                  default: 3300
                vbus:
                  type: integer
                  default: 3300
        scripts:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                default: 'Reflash'
              time:
                type: string
                default: '00.00.00'

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
